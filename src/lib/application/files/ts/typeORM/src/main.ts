import { NestFactory, Reflector } from '@nestjs/core';
import { AppModule } from './app/app.module';
import { DocumentBuilder, SwaggerCustomOptions, SwaggerModule } from '@nestjs/swagger';
import * as figlet from 'figlet';
import { configService } from './config/config.service';
import { ClassSerializerInterceptor, ValidationPipe } from '@nestjs/common';
import { useContainer } from 'class-validator';
import * as helmet from 'helmet';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  if (!configService.isProduction()) {

    // ╔═╗╦ ╦╔═╗╔═╗╔═╗╔═╗╦═╗
    // ╚═╗║║║╠═╣║ ╦║ ╦║╣ ╠╦╝
    // ╚═╝╚╩╝╩ ╩╚═╝╚═╝╚═╝╩╚═
    const customOptions: SwaggerCustomOptions = {
      swaggerOptions: {
        persistAuthorization: true,
      },
      customSiteTitle: 'RH Eval API',
    };

    const options = new DocumentBuilder()
      .setTitle('RH Eval API')
      .setDescription('NestJs project Tempalte Generated By Nest Advanced Schematics')
      .setVersion('1.0')
      .addBearerAuth()
      .build();

    const document = SwaggerModule.createDocument(app, options, { deepScanRoutes: true });

    SwaggerModule.setup('api', app, document, customOptions);
  }

  useContainer(app.select(AppModule), { fallbackOnErrors: true });
  app.useGlobalPipes(new ValidationPipe());
  app.useGlobalInterceptors(new ClassSerializerInterceptor(app.get(Reflector)));
  app.enableCors();
  app.use(helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: [`'self'`],
        styleSrc: [`'self'`, `'unsafe-inline'`],
        imgSrc: [`'self'`, 'data:', 'validator.swagger.io'],
        scriptSrc: [`'self'`, `http: 'unsafe-inline'`],
      },
    },
  }));

  const port = process.env.PORT || 3333;
  await app.listen(port, () => {
    figlet("2021 - Eval API", (_, data) => {
      console.log("\x1b[1m\x1b[32m%s\x1b[0m", data);
      figlet("Powered By PR0XYM-1T", { font: "Small" }, (a, res) =>
        console.log("\x1b[35m%s\x1b[0m", res)
      );
    });
    console.log(`Listening at http://localhost:${port}/`);
  });
}
bootstrap();
